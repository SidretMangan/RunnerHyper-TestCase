//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/Scripts/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""ef962d4f-a40d-477e-9041-748a20d9807f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b16e3a5c-920d-43ef-ad24-39953052a059"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SkillOne"",
                    ""type"": ""Button"",
                    ""id"": ""597da023-4d6a-4e5f-be68-d256ee982e1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillTwo"",
                    ""type"": ""Button"",
                    ""id"": ""8a2c5417-878e-4d68-a57a-2f01d0f4790b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillThree"",
                    ""type"": ""Button"",
                    ""id"": ""7a54d1ff-fafc-4823-b280-600de4693046"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e46d8c6-53f5-4527-a3ac-25b01966d953"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ce38ebb-0042-4518-a001-5e842e7db1ac"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1921816c-9d46-401e-9266-13500f773e6e"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64568105-088d-4c47-b00e-fd0340a15b1f"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillThree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_Movement = m_PlayerActionMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerActionMap_SkillOne = m_PlayerActionMap.FindAction("SkillOne", throwIfNotFound: true);
        m_PlayerActionMap_SkillTwo = m_PlayerActionMap.FindAction("SkillTwo", throwIfNotFound: true);
        m_PlayerActionMap_SkillThree = m_PlayerActionMap.FindAction("SkillThree", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private IPlayerActionMapActions m_PlayerActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerActionMap_Movement;
    private readonly InputAction m_PlayerActionMap_SkillOne;
    private readonly InputAction m_PlayerActionMap_SkillTwo;
    private readonly InputAction m_PlayerActionMap_SkillThree;
    public struct PlayerActionMapActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerActionMapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerActionMap_Movement;
        public InputAction @SkillOne => m_Wrapper.m_PlayerActionMap_SkillOne;
        public InputAction @SkillTwo => m_Wrapper.m_PlayerActionMap_SkillTwo;
        public InputAction @SkillThree => m_Wrapper.m_PlayerActionMap_SkillThree;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnMovement;
                @SkillOne.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillOne;
                @SkillOne.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillOne;
                @SkillOne.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillOne;
                @SkillTwo.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillTwo;
                @SkillTwo.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillTwo;
                @SkillTwo.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillTwo;
                @SkillThree.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillThree;
                @SkillThree.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillThree;
                @SkillThree.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnSkillThree;
            }
            m_Wrapper.m_PlayerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @SkillOne.started += instance.OnSkillOne;
                @SkillOne.performed += instance.OnSkillOne;
                @SkillOne.canceled += instance.OnSkillOne;
                @SkillTwo.started += instance.OnSkillTwo;
                @SkillTwo.performed += instance.OnSkillTwo;
                @SkillTwo.canceled += instance.OnSkillTwo;
                @SkillThree.started += instance.OnSkillThree;
                @SkillThree.performed += instance.OnSkillThree;
                @SkillThree.canceled += instance.OnSkillThree;
            }
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    public interface IPlayerActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSkillOne(InputAction.CallbackContext context);
        void OnSkillTwo(InputAction.CallbackContext context);
        void OnSkillThree(InputAction.CallbackContext context);
    }
}
